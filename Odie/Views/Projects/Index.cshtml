@using Microsoft.AspNetCore.Identity
@using Odie.Models

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@model Odie.Models.ProjectsPageViewModel

@{
    ViewData["Title"] = "Projects";
}

<h2>
    @ViewData["Title"]
    <button class="btn btn-success pull-right" data-toggle="modal" data-target="#newProjectModal"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span> New Project</button>
</h2>

@if (@Model.Notice.MessageID != 0) {
    <div class="alert @(@Model.Notice.MessageID > 0 ? "alert-info" : "alert-warning") alert-dismissible fade in" role=alert>
        <button type=button class=close data-dismiss=alert aria-label=Close><span aria-hidden=true>&times;</span></button>
        <strong>
            <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
            <span class="sr-only">Notice:</span>
        </strong>
        @Model.Notice.Message
    </div>
}

<h5>Your projects and projects others have shared with you.</h5>

<div class="list-group">
@foreach (var project in Model.Projects) {
    <div class="project@(project.ID) list-group-item@(Model.Notice.NewID == project.ID ? " highlight" : "")">
        <div class="pull-right">
            <a class="btn btn-primary" asp-controller="Files" asp-action="Index" asp-route-id="@project.ID">Open</a>
            <a class="btn btn-danger" asp-action="Delete" asp-route-id="@project.ID">Delete</a>
        </div>
        <h4 class="list-group-item-heading">
            <span class="list-group-item-heading">@Html.DisplayFor(modelItem => project.Name)</span>
            <button class="editName btn btn-xs" data-pid="@project.ID"><span class="glyphicon glyphicon-pencil
    "></span></button>
            <button class="updateName btn btn-primary btn-xs hidden" data-pid="@project.ID">OK</button>
            <small>
                @Html.DisplayFor(modelItem => project.CreatedDate)
                @if (@project.CreatedByUserID != @UserManager.GetUserId(User)) {
                <span class="label label-warning other" title="Shared by">
                    @Html.DisplayFor(modelItem => project.CreatedByUser.Name)
                </span> 
                }
            </small>
        </h4>
        <p class="list-group-item-text sharedWith sharedWith@(project.ID)">
            <span class="text-muted">Shared with:</span><br>
            @if(project.SharedWith.Any()) {
                <span class="sharing">
                @Html.Raw(string.Join(", ", project.SharedWith.Select(s => s.Name)))
                </span>
            }
            else
            {
                <span class="sharing"><em>None.</em></span>
            }
            <select class="sharing hidden" data-pid="@project.ID" multiple="multiple">
            @foreach (var user in project.SharedWith) {
                <option value="@(user.ID)" selected="selected">@Html.DisplayFor(modelItem => user.Name)</option>
            }
            </select>
            <button class="editSharing btn btn-xs" data-pid="@project.ID"><span class="glyphicon glyphicon-share-alt
"></span></button>
        </p>
    </div>
}
</div>

<!--
<p>Templates:</p>
<ul>
@foreach (var template in Model.Templates) {
    <li>
        @Html.DisplayFor(modelItem => template.Name)
        @Html.DisplayFor(modelItem => template.CreatedByUser.Name)
        @Html.DisplayFor(modelItem => template.CreatedDate)
        <a asp-action="Sharing" asp-route-id="@template.ID">Sharing</a>
    </li>
}
</ul>
-->

<div class="modal fade" id="newProjectModal" tabindex="-1" role="dialog" aria-labelledby="newProjectModalLabel">
    <form asp-area="" asp-controller="Home" asp-action="Create" method="post">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="newProjectModalLabel">New Project</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                    <label for="name-field" class="control-label">Project's Name:</label>
                    <input type="text" class="form-control" name="name" id="name-field">
                    </div>
                </div>
                <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary">Create Project</button>
                </div>
            </div>
        </div>
    </form>
</div>

@section scripts
{
    <script>
        $(document).on("click", ".editName", function () {
            var pid = $(this).attr('data-pid');
            var p = $('.project' + pid);

            p.find('.editName').addClass('hidden');
            p.find('.updateName').removeClass('hidden');

            var span = p.find('span').first();
            var spanWidth = (span.outerWidth(true) + 10) + 'px';
            var input = $('<input />', {
                'type': 'text',
                'value': span.text()
            });
            span.replaceWith(input);
            input.outerWidth(spanWidth);
            input.focus().select();
            input.blur(function () {
                p.find('.updateName').trigger('click');
            });
        });

        $(document).on("click", ".updateName", function () {
            var pid = $(this).attr('data-pid');
            var p = $('.project' + pid);

            p.find('.updateName').prop('disabled', true);

            var input = p.find('input').first();
            var name = input.val();

            if (name != input.prop("defaultValue")) {
                $.post("/Home/Rename/" + pid, {'name': name});
            }

            var span = $('<span>' + name + '</span>');
            input.replaceWith(span);

            p.find('.updateName').prop('disabled', false).addClass('hidden');
            p.find('.editName').removeClass('hidden');
        });

        $(document).on("click", ".editSharing", function () {
            var pid = $(this).attr('data-pid');
            var p = $('.project' + pid);
            
            var sharing = p.find('select.sharing').first();
            var sharingSpan = p.find('span.sharing').first();

            sharing.select2({
                minimumInputLength: 1,
                allowClear: false,
                multiple: true,
                closeOnSelect: true,
                formatInputTooShort: function () {return '';},
                ajax: {
                    url: "/Home/MatchingUsers/",
                    dataType: 'json',
                    delay: 100,
                    processResults: function (data, params) {
                        // TODO remove already existing
                        return {
                            results: data.items
                        }
                    }
                },
                formatResult: function (item) {return item.text;},
                formatSelection: function (item) {return item.text;}
            });
            sharing.focus();
            sharingSpan.addClass("hidden");

            sharing.on("change", function(e) {

                var selectedOptions = p.find('select option:selected');
                var selections = $.map(selectedOptions, function (el, i) {return $(el).text();});
                var selectionIDs = $.map(selectedOptions, function (el, i) {return $(el).val();});
                if (selections.length) {
                    sharingSpan.text(selections.join(", "));
                } else {
                    sharingSpan.html("<em>None.</em>");
                }
                sharingSpan.removeClass('hidden');
                console.log(selections);
                console.log(selectionIDs);
                console.log(selections.join(", "));

                $.ajax({
                    type: "POST",
                    url: "/Home/Sharing/" + pid,
                    data: {'sharing': selectionIDs.join(",")},
                    dataType: "json",
                    success: function(data) { /* TODO */ },
                    failure: function(data) { Console.log('Sharing update failed!'); },
                });

                setTimeout(function(){
                    $('this').select2('destroy');
                    $('.project' + pid + ' .select2').remove();
                    $('.project' + pid + ' .select2-container').css("display","none");
                }, 100);

                p.find('.editSharing').removeClass('hidden');
            });

            p.find('.editSharing').addClass('hidden');
        });

        $(document).on("click", ".updateSharing", function () {
            var pid = $(this).attr('data-pid');
            var p = $('.project' + pid);

            var sharingSpan = p.find('span.sharing').first();

            p.find('.editSharing').prop('disabled', true);
        });

        $(document).on("click", ".updateSharing", function () {
            var pid = $(this).attr('data-pid');
            var p = $('.project' + pid);

            var sharingSpan = p.find('span.sharing').first();

            p.find('.editSharing').prop('disabled', true);
        });


        $(document).ready(function () {
            setTimeout(function () {
                $('.alert').alert('close');
                $('.highlight').removeClass('highlight');
            }, 3000);
        });
    </script>
}