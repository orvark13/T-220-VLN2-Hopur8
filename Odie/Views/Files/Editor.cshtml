@model Odie.Models.EditorViewModel

<div id="editor">@Html.Raw(Model.FileRevision.Contents)</div>
<div id="preview"></div>

@section scripts
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/ace.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/mode-markdown.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/snippets/markdown.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.6.4/showdown.min.js"></script>
    <script>
        $(document).ready(function () {
            var dirty = false;
            var wsChange = false;

            var editor = ace.edit("editor");
            editor.setTheme("ace/theme/solarized_light");
            editor.getSession().setMode("ace/mode/markdown");
            editor.$blockScrolling = Infinity;

            var converter = new showdown.Converter();

            editor.getSession().on('change', function () {
                var source = editor.getSession().getValue();
                var html = converter.makeHtml(source);
                $('#preview').html(html);
                dirty = true;
                $('#tb-save').removeClass('btn-success').addClass('btn-warning');
            });

            $('#preview').html(converter.makeHtml(editor.getSession().getValue()));

            $('#tb-files,#tb-projects').on('click', function (e) {
                if (dirty && !confirm("Unsaved changes might be lost.\n\nAre your sure you want to leave the editor?")) {
                    e.preventDefault();
                } 
            });
            $('#tb-save').on('click', function () {
                if (dirty) {
                $.post("/Files/SaveRevision/", {
                        'nodeID': @(Model.File.ID),
                        'fileRevisionID': @(Model.FileRevision.ID),
                        'contents': editor.getSession().getValue()
                    })
                    .done(function (r) {
                        $('#tb-save').removeClass('btn-warning').addClass('btn-success');
                        dirty = false;
                    });
                }
            });


            var wsIconTimer;
            function setWsIcon(up) {
                clearTimeout(wsIconTimer);

                if (up) {
                    $("#tb-ws span").removeClass('glyphicon-cloud').addClass('glyphicon-cloud-upload');
                } else {
                    $("#tb-ws span").removeClass('glyphicon-cloud').addClass('glyphicon-cloud-download');
                }

                wsIconTimer = setTimeout(function () {
                    $("#tb-ws span").removeClass('glyphicon-cloud-upload').removeClass('glyphicon-cloud-download').addClass('glyphicon-cloud');
                }, 100);
            }


            var webSocket = new WebSocket("ws://localhost:5000");
            var guid = odie.helpers.generateGuid();
            var docrev = "@(Model.File.ID):@(Model.FileRevision.ID)";
            webSocket.onopen = function () {
                $("#tb-ws").removeClass('btn-warning').addClass('btn-success').removeClass('btn-danger');
                $("#tb-ws").attr("title", "Connected");

                if (webSocket.readyState == WebSocket.OPEN) {
                    var package = JSON.stringify({"doc": "@(Model.File.ID):@(Model.FileRevision.ID)", "guid": guid, "act": "msg", "msg": "Hello World"});
                    webSocket.send(package);
                }
            };
            webSocket.onmessage = function (e) {
                setWsIcon(false);

                var r = JSON.parse(e.data);
                console.log(r);
                switch (r.act) {
                    case "msg":
                        console.log("Message: " + r.msg);
                        break;
                    case "change":
                        if (r.doc == docrev && r.guid !== guid) {
                            wsChange = true;
                            editor.getSession().getDocument().applyDeltas([r.delta]);
                            wsChange = false;
                        } else {
                            console.log("Ignoring: my own delta or edit for a different document.");
                        }
                        break;
                    case "cls":
                        editor.setValue("");
                        break;
                }
            };
            webSocket.onerror = function (e) {
                $("#tb-ws").addClass('btn-warning').removeClass('btn-success').removeClass('btn-danger');
                console.log('ws-error: ' + e.message);
            };
            webSocket.onclose = function () {
                $("#tb-ws").removeClass('btn-warning').removeClass('btn-success').addClass('btn-danger');
                $("#tb-ws").attr("title", "Disconnected");
            };

            window.beforeunload = function () {
                if (webSocket.readyState == WebSocket.OPEN) {
                    var package = JSON.stringify({"doc": "@(Model.File.ID):@(Model.FileRevision.ID)", "guid": guid, "act": "msg", "msg": "Goodbye World"});
                    webSocket.send(package);
                }
            };
            window.unload = function () {
                webSocket.onclose = null;
                webSocket.close();
            };

            $("#tb-ws").click(function () {
                console.log(webSocket);
                if (webSocket.readyState == WebSocket.OPEN) {
                    webSocket.close();
                } else {
                    webSocket = new WebSocket("ws://localhost:5000");
                    // TODO reset event handlers
                }
            });

            editor.on("change", function(e) {
                if (wsChange == false) {
                    if (webSocket.readyState == WebSocket.OPEN) {
                        setWsIcon(true)

                        var package = JSON.stringify({"doc": "@(Model.File.ID):@(Model.FileRevision.ID)", "guid": guid, "act": "change", "delta": e});
                        webSocket.send(package);

                    } else {
                        $("#tb-ws").attr("title", "Connection closed");
                        // TODO fix the connection!
                    }
                }
            });

        });
    </script>
}