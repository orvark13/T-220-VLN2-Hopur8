@using Odie.Models.ViewModels
@using Odie.Models
@using Microsoft.AspNetCore.Identity
@using Odie.Models.Entities

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@model EditorViewModel

<div id="editor">@Html.Raw(Model.FileRevision.Contents)</div>
<div id="preview"></div>

@section scripts
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/ace.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/mode-markdown.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/snippets/markdown.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.6.4/showdown.min.js"></script>
    <script>
        $(document).ready(function () {

            /* Editor */

            var dirty = false;
            var wsChange = false;
            var userID = "@UserManager.GetUserId(User)";
            var userName = "@UserManager.GetUserName(User)";

            var editor = ace.edit("editor");
            editor.setTheme("ace/theme/solarized_light");
            editor.getSession().setMode("ace/mode/markdown");
            editor.$blockScrolling = Infinity;

            var converter = new showdown.Converter();

            editor.getSession().on('change', function () {
                var source = editor.getSession().getValue();
                var html = converter.makeHtml(source);
                $('#preview').html(html);
                dirty = true;
                $('#tb-save').removeClass('btn-primary').addClass('btn-warning');
            });

            $('#preview').html(converter.makeHtml(editor.getSession().getValue()));

            $('#tb-files,#tb-projects').on('click', function (e) {
                if (dirty && !confirm("Unsaved changes might be lost.\n\nAre your sure you want to leave the editor?")) {
                    e.preventDefault();
                } 
            });

            $('#tb-save').on('click', function () {
                if (dirty) {
                $.post("/Files/SaveRevision/", {
                        'nodeID': @(Model.File.ID),
                        'fileRevisionID': @(Model.FileRevision.ID),
                        'contents': editor.getSession().getValue()
                    })
                    .done(function (r) {
                        $('#tb-save').removeClass('btn-warning').addClass('btn-primary');
                        dirty = false;

                        if (webSocket && webSocket.readyState == WebSocket.OPEN) {
                            var package = JSON.stringify({"doc": "@(Model.File.ID):@(Model.FileRevision.ID)", "guid": guid, "act": "save", "user": userName});
                            webSocket.send(package);
                        }

                    });
                }
            });

            $("#tb-preview").click(function () {
                $("#editor").toggleClass("full");
                $("#preview").toggleClass("hidden");
                $(this).find('span').toggleClass("glyphicon glyphicon-eye-open").toggleClass("glyphicon glyphicon-eye-close");
            });

            /* WebSockets */

            var wsIconTimer;
            function setWsIcon(up) {
                clearTimeout(wsIconTimer);

                if (up) {
                    $("#tb-ws span").removeClass('glyphicon-cloud').addClass('glyphicon-cloud-upload');
                } else {
                    $("#tb-ws span").removeClass('glyphicon-cloud').addClass('glyphicon-cloud-download');
                }

                wsIconTimer = setTimeout(function () {
                    $("#tb-ws span").removeClass('glyphicon-cloud-upload').removeClass('glyphicon-cloud-download').addClass('glyphicon-cloud');
                }, 100);
            }

            function newWebSocket(onOpen, onMessage, onError, onClose) {
                var webSocket = new WebSocket("ws://localhost:5000"); /* FIXME, endpoint hardcoded! */
                webSocket.onopen = onOpen;
                webSocket.onmessage = onMessage;
                webSocket.onerror = onError;
                webSocket.onclose = onClose;
                return webSocket;
            }

            var guid = odie.helpers.generateGuid();
            var docrev = "@(Model.File.ID):@(Model.FileRevision.ID)";

            var wsOnOpen = function () {
                $("#tb-ws").removeClass('btn-warning').addClass('btn-success').removeClass('btn-danger');
                odie.ui.pop($("#tb-ws"), "Connected to server.");

                if (webSocket.readyState == WebSocket.OPEN) {
                    var package = JSON.stringify({"doc": "@(Model.File.ID):@(Model.FileRevision.ID)", "guid": guid, "act": "join", "user": userName});
                    webSocket.send(package);
                }
            };

            var wsOnMessage = function (e) {
                var r = JSON.parse(e.data);

                /* Ignore messages originating from myself
                   and not concerning the current document. */
                if (r.guid === guid || r.doc !== docrev) {
                    return;
                }

                setWsIcon(false);

                switch (r.act) {
                    case "msg":
                        odie.ui.pop($("#tb-users"), r.user + ": " + r.msg);
                        break;
                    case "change":
                        wsChange = true;
                        editor.getSession().getDocument().applyDeltas([r.delta]);
                        wsChange = false;
                        break;
                    case "join":
                        odie.ui.pop($("#tb-users"), r.user + " has joined.");
                        break;
                    case "leave":
                        odie.ui.pop($("#tb-users"), r.user + " has left.");
                        break;
                    case "save":
                        odie.ui.pop($("#tb-users"), r.user + " just saved the document.");
                        $('#tb-save').removeClass('btn-warning').addClass('btn-primary');
                        dirty = false;
                        break;
                }
            };

            var wsOnError = function (e) {
                $("#tb-ws").addClass('btn-warning').removeClass('btn-success').removeClass('btn-danger');
                odie.ui.pop($("#tb-ws"), "Websocket error code: " + e.code);
            };

            var wsOnClose = function () {
                $("#tb-ws").removeClass('btn-warning').removeClass('btn-success').addClass('btn-danger');
                odie.ui.pop($("#tb-ws"), "Disconnected from server.");
            };

            var webSocket = newWebSocket(wsOnOpen, wsOnMessage, wsOnError, wsOnClose);

            window.onbeforeunload = function () {
                if (webSocket.readyState != WebSocket.CLOSED) {
                    var package = JSON.stringify({"doc": "@(Model.File.ID):@(Model.FileRevision.ID)", "guid": guid, "act": "leave", "user": userName});
                    webSocket.send(package);
                }
                webSocket.close();
            };

            $("#tb-ws").click(function () {
                if (webSocket.readyState == WebSocket.OPEN) {
                    /* User closes connection manually. */
                    if (webSocket.readyState != WebSocket.CLOSED) {
                        var package = JSON.stringify({"doc": "@(Model.File.ID):@(Model.FileRevision.ID)", "guid": guid, "act": "leave", "user": userName});
                        webSocket.send(package);
                    }
                    webSocket.close();
                } else {
                    /* User opens connection again manually. */
                    webSocket = newWebSocket(wsOnOpen, wsOnMessage, wsOnError, wsOnClose);
                }
            });

            editor.on("change", function(e) {
                if (wsChange == false) {
                    if (webSocket.readyState == WebSocket.OPEN) {
                        setWsIcon(true)
                        var package = JSON.stringify({"doc": "@(Model.File.ID):@(Model.FileRevision.ID)", "guid": guid, "act": "change", "delta": e});
                        webSocket.send(package);
                    } else {
                        /* Connection error detected. */
                        odie.ui.pop($("#tb-ws"), "Connection closed.");
                        webSocket = newWebSocket(wsOnOpen, wsOnMessage, wsOnError, wsOnClose);
                    }
                }
            });

        });
    </script>
}